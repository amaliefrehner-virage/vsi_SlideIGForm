
@using SlideIGWebRetry.Models
@using System.Web.Http.Results;
@using SlideIGWebRetry.HtmlHelperExtensions
@using Newtonsoft.Json;
@model List<JsonResult<ScenarioInfo>>

@{
    ViewBag.Title = "Json Generator";
}

<!DOCTYPE html>

<html>
<head>
    <title>PrintJson</title>
    <script src="~/Scripts/jquery-3.6.4.js"></script>
    <script src="~/Scripts/popper.min.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="~/Scripts/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.2.0/jszip.min.js"></script>
    <script src="~/Scripts/popper.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <link href="~/Scripts/select2.min.css" rel="stylesheet" />
    <script src="~/Scripts/select2.min.js"></script>
</head>
<body  id="bodyall">
    <div style="display: flex; height: 10vh; align-items: center;">
        <h3>SlideIGs In Json Format</h3>
        <button class="btn btn-primary" style="margin-left:10vw" id="buttonDownload">Download</button>
     
    </div>
    @if (Model != null)
    {
        if (Model != null)
        {

            <div class="globalfont">
                <div id="loading" style="display:none">
                    @Html.LoadingAnimation()
                </div>
                <div class="">
                    @foreach (var slide in Model)
                    { 
                        var id = $"{slide.Content.IDScenario}_{slide.Content.IDLanguage}_{slide.Content.IDSimulatorType}";   
                        <div style="margin-top:1vh">
                            <button style="width:10vw;border-radius:3px" id=@($"btn_{id}")>@($"{id} 🔽")</button>
                            <pre id=@($"{id}") style="display:none" class="ScenarioObject">@(JsonConvert.SerializeObject(slide.Content, Formatting.Indented))</pre>
                        </div>   
                    }

                </div>
            </div>
        }
    }
</body>
</html>

<style>
    .bullet-custom {
        list-style: none;
    }

    .bullet-arrow:before {
        content: "\27A2";
        margin-right: 15px;
    }

    .bullet-check:before {
        content: "\2713";
        margin-right: 15px;
        font-weight: bold;
    }

    .bullet-flower:before {
        content: "\1BFD";
        margin-right: 15px;
    }

    .bullet-white:before {
        content: "\25E6";
        margin-right: 15px;
    }

    .bullet-default:before {
        content: "\2022";
        margin-right: 15px;
    }

    .globalfont {
        font-family: "Times New Roman";
    }
</style>

<script>

    function showScenarioContent(id) {
        document.getElementById(id).style = "display:auto";
    }
    $("button").on("click", function (event) {
        event.preventDefault();
        
        var idOfEvent = event.target.id;

        if (idOfEvent.startsWith("btn_")) {

            var idScenarioElement = idOfEvent.replace("btn_", "");

            if (document.getElementById(idOfEvent).innerHTML.includes("🔽")) {
               
                console.log("button was clicked " + idScenarioElement);
                document.getElementById(idOfEvent).innerHTML = document.getElementById(idOfEvent).innerHTML.replace("🔽","🔼");
                document.getElementById(idScenarioElement).style = 'display:auto';

            } else {

                document.getElementById(idOfEvent).innerHTML = document.getElementById(idOfEvent).innerHTML.replace("🔼", "🔽");

                document.getElementById(idScenarioElement).style = 'display:none';

            }
        }

    });

    $('#buttonDownload').on('click', async function () {

        event.preventDefault();

        var scenarios = document.querySelectorAll(".ScenarioObject");
        var scenarioArray = [...scenarios];
        var blobArray = [];
        scenarioArray.forEach(sce => {

            var fileName = sce.id + ".json";
      
            var blob = new Blob([sce.innerText], {
                type: "application/json",
            });
            blob.name = fileName;
            blobArray.push(blob);
            //var wordLink = document.createElement('a');
            //wordLink.href = 'data:application/json;charset=utf-8,' + encodedContent;
            //wordLink.download = fileName;
            //wordLink.click();
        }); 
        const zip = new JSZip();
        const folder = zip.folder('JSONFolder');
        blobArray.forEach((blob) => folder.file(blob.name, blob));
        var zipFile = await zip.generateAsync({ type: "blob" });

        var wordLink = document.createElement('a');
        wordLink.setAttribute("href", URL.createObjectURL(zipFile));
        wordLink.download = "JSONFolder";
        wordLink.click();
    })

</script>
